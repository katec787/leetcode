public int[] kClosestNumbers(int[] A, int target, int k) {
        	 int[] res = new int[k];
	    	 PriorityQueue<Integer> queue = new PriorityQueue<>(new Comparator<Integer>() {
	    	        @Override
	    	        public int compare(Integer a, Integer b) {
	    	        	if(Math.abs(a - target) < Math.abs(b - target)) return -1;
	    	        	else if (Math.abs(a - target) == Math.abs(b - target)) return a - b;
	    	        	else return 1;
	    	        }});
	    	 
	    	 for(int i : A){
	    		 queue.add(i);
	    	 }
	    	 int index = 0;
	    	 while(queue.size() > 0 && index < k){
	    		 res[index] = queue.poll();
	    		 index++;
	    	 }
	    	 return res;
    }


class Solution {
    public List<Integer> findClosestElements(int[] arr, int k, int x) {
        int lo = 0, hi = arr.length - k;
        while (lo < hi) {
            int mid = (lo + hi) / 2;
            if (x - arr[mid] > arr[mid + k] - x)
                lo = mid + 1;
            else
                hi = mid;
        }
        List<Integer> b = new ArrayList<>();
        for(int i = lo; i < lo + k; i++) {
            b.add(arr[i]);
        }
        return b;
    }
}



class Solution {
    public List<Integer> findClosestElements(int[] arr, int k, int x) {
        List<Integer> input =Arrays.stream(arr).boxed().collect(Collectors.toList());
        Collections.sort(input, (a,b) -> a == b ? a - b : Math.abs(a-x) - Math.abs(b-x));
        input = input.subList(0, k);
         Collections.sort(arr);
         return re;
    }
}



class Solution {
    public List<Integer> findClosestElements(int[] arr, int k, int x) {
        int lo = 0, hi = arr.length - k;
        while (lo < hi) {
            int mid = (lo + hi) / 2;
            if (x - arr[mid] > arr[mid + k] - x)
                lo = mid + 1;
            else
                hi = mid;
        }
        List<Integer> b = new ArrayList<>();
        for(int i = lo; i < lo + k; i++) {
            b.add(arr[i]);
        }
        return b;
    }
}