https://monkeysayhi.github.io/2017/08/04/%E3%80%90%E5%88%B7%E9%A2%98%E3%80%91Search-in-a-Big-Sorted-Array/

反方向先找到一个超过target的index。把index -1设为end，然后进行二分查找。由于可能有一堆一样的target，所以我们需要找第一个出现的target。


public class Solution {
    /**
     * @param reader: An instance of ArrayReader.
     * @param target: An integer
     * @return : An integer which is the index of the target number
     */
    public int searchBigSortedArray(ArrayReader reader, int target) {
        // write your code here
        
        int index = 1;
        while (reader.get(index - 1) != -1 && reader.get(index - 1) <= target) {
            index *= 2;
        }
        
        int start = 0;
        int end = index - 1;
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            if (reader.get(mid) >= target) {
                end = mid;
            }
            else if (reader.get(mid) < target) {
                start = mid;
            }
        }
        
        if (reader.get(start) == target) {
            return start;
        }
        if (reader.get(end) == target) {
            return end;
        }
        
        return -1;
    }
}