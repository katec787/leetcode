https://leetcode.com/problems/two-sum-iii-data-structure-design/

class TwoSum {
    Map<Integer, Integer> map;

    /** Initialize your data structure here. */
    public TwoSum() {
        map = new HashMap<>();
    }

    /** Add the number to an internal data structure.. */
    public void add(int number) {
        map.put(number, map.getOrDefault(number, 0) + 1);
    }

    /** Find if there exists any pair of numbers which sum is equal to the value. */
    public boolean find(int value) {
        if(map.size() >= 1) {
            boolean re = false;
            for(int i : map.keySet()) {
                map.put(i, map.get(i) - 1);
                if(map.containsKey(value - i) && map.get(value - i) > 0) re = true;
                map.put(i, map.get(i) + 1);
                if(re) return true;
            }
        }
        return false;
    }


https://leetcode.com/problems/two-sum-iii-data-structure-design/discuss/52034/Fast-and-simple-AC-Python
python
class TwoSum:

    def __init__(self):
        self.ctr = collections.defaultdict(int)

    def add(self, number):
        self.ctr[number] += 1

    def find(self, value):
        ctr = self.ctr
        return any(value - num in ctr and (value - num != num or ctr[num] > 1)
                   for num in ctr)
